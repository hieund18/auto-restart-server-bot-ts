// src/index.ts
import { Telegraf, Context } from 'telegraf';
import axios, { AxiosError } from 'axios';
import * as fs from 'fs'; // <-- ƒê·ªïi sang 'fs' (kh√¥ng d√πng 'promises')
import * as path from 'path';
import { config } from 'dotenv';

// N·∫°p c√°c bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env
config();

// --- 1. L·∫§Y TH√îNG TIN C·∫§U H√åNH ---
const {
    TELEGRAM_TOKEN,
    JENKINS_URL,
    JENKINS_USER,
    JENKINS_TOKEN,
    JENKINS_JOB,
    SUPER_ADMIN_ID
} = process.env;

if (!TELEGRAM_TOKEN || !SUPER_ADMIN_ID) {
    console.error("L·ªñI: TELEGRAM_TOKEN v√† SUPER_ADMIN_ID l√† b·∫Øt bu·ªôc!");
    process.exit(1);
}

const superAdminIdNum = parseInt(SUPER_ADMIN_ID, 10);
// S·ª≠a ƒë∆∞·ªùng d·∫´n file JSON ƒë·ªÉ ch·∫°y tr·ª±c ti·∫øp (kh√¥ng d√πng Docker)
const USERS_FILE = './data/authorized_users.json'; 

let authorizedUsers: Set<number> = new Set();

// --- 2. C√ÅC H√ÄM TR·ª¢ GI√öP (ƒê√É CHUY·ªÇN SANG ƒê·ªíNG B·ªò) ---

function loadAuthorizedUsers(): void { // <-- X√≥a async
    try {
        // Ki·ªÉm tra file t·ªìn t·∫°i (ƒë·ªìng b·ªô)
        if (fs.existsSync(USERS_FILE)) { 
            const data = fs.readFileSync(USERS_FILE, 'utf-8'); // <-- D√πng readFileSync
            const userIds: number[] = JSON.parse(data);
            authorizedUsers = new Set(userIds);
            console.log(`ƒê√£ t·∫£i ${authorizedUsers.size} user v√†o b·ªô nh·ªõ.`);
        } else {
             // File kh√¥ng t·ªìn t·∫°i
             console.warn("Kh√¥ng t√¨m th·∫•y file user, b·∫Øt ƒë·∫ßu v·ªõi danh s√°ch r·ªóng.");
             authorizedUsers = new Set();
        }
    } catch (error) {
        console.error("L·ªói khi ƒë·ªçc file user, b·∫Øt ƒë·∫ßu v·ªõi danh s√°ch r·ªóng.", error);
        authorizedUsers = new Set();
    }
}

function saveAuthorizedUsers(): void { // <-- X√≥a async
    try {
        const userIds = Array.from(authorizedUsers);
        const dir = path.dirname(USERS_FILE);

        // ƒê·∫£m b·∫£o th∆∞ m·ª•c t·ªìn t·∫°i (ƒë·ªìng b·ªô)
        if (!fs.existsSync(dir)) {
            fs.mkdirSync(dir, { recursive: true });
        }
        
        // Ghi file (ƒë·ªìng b·ªô)
        fs.writeFileSync(USERS_FILE, JSON.stringify(userIds, null, 2));
    } catch (error) {
        console.error("L·ªói nghi√™m tr·ªçng khi l∆∞u file user:", error);
    }
}

// H√†m ki·ªÉm tra quy·ªÅn (kh√¥ng ƒë·ªïi)
function isAuthorized(userId: number | undefined): boolean {
    if (!userId) return false;
    if (userId === superAdminIdNum) return true;
    return authorizedUsers.has(userId);
}

// --- 3. KH·ªûI T·∫†O BOT (Telegraf v3) ---
// Telegraf v3 d√πng 'new Telegraf()' thay v√¨ 'new Telegraf.Telegraf()'
const bot = new Telegraf(TELEGRAM_TOKEN);

// --- 4. C√ÅC L·ªÜNH BOT (C√∫ ph√°p Telegraf v3) ---

// L·ªánh /myid
bot.command('myid', (ctx) => {
    const userId = ctx.from.id;
    ctx.replyWithMarkdown(`üÜî User ID c·ªßa b·∫°n l√†:\n\`${userId}\``);
});

// L·ªánh /restart
bot.command('restart', async (ctx) => {
    if (!isAuthorized(ctx.from?.id)) {
        return ctx.reply("‚õî B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán l·ªánh n√†y.");
    }

    if (!JENKINS_URL || !JENKINS_USER || !JENKINS_TOKEN || !JENKINS_JOB) {
        return ctx.reply("‚ùå L·ªói c·∫•u h√¨nh bot: Thi·∫øu th√¥ng tin Jenkins (URL, USER, TOKEN, ho·∫∑c JOB).");
    }

    await ctx.reply("üöÄ ƒê√£ nh·∫≠n l·ªánh restart. G·ª≠i y√™u c·∫ßu ƒë·∫øn Jenkins...");
    const triggerUrl = `${JENKINS_URL}/job/${JENKINS_JOB}/buildWithParameters`;

    try {
        const response = await axios.post(
            triggerUrl,
            null, 
            {
                auth: {
                    username: JENKINS_USER,
                    password: JENKINS_TOKEN
                },
                params: {
                    TELEGRAM_CHAT_ID: ctx.chat.id,
                    BOT_TOKEN: TELEGRAM_TOKEN // ‚ö†Ô∏è C·∫¢NH B√ÅO: V·∫´n l√† r·ªßi ro b·∫£o m·∫≠t
                }
            }
        );

        if ([200, 201, 202].includes(response.status)) {
            await ctx.reply("‚úÖ Jenkins ƒë√£ nh·∫≠n l·ªánh. ƒêang th·ª±c thi...");
        } else {
            await ctx.reply(`‚ùå L·ªói khi g·ªçi Jenkins: ${response.status}\n${response.data}`);
        }
    } catch (error) {
        const axiosError = error as AxiosError;
        console.error("L·ªói khi g·ªçi Jenkins:", axiosError.message);
        let errorMsg = axiosError.message;
        if (axiosError.response) {
            errorMsg = `Status: ${axiosError.response.status}\nData: ${JSON.stringify(axiosError.response.data)}`;
        }
        await ctx.reply(`‚ùå L·ªói nghi√™m tr·ªçng khi k·∫øt n·ªëi Jenkins:\n${errorMsg}`);
    }
});

// L·ªánh /adduser (Telegraf v3 d√πng ctx.message.text)
bot.command('adduser', async (ctx) => {
    if (ctx.from.id !== superAdminIdNum) {
        return ctx.reply("‚õî L·ªánh n√†y ch·ªâ d√†nh cho Super Admin.");
    }
    
    // Telegraf v3 kh√¥ng c√≥ 'args', ph·∫£i t·ª± x·ª≠ l√Ω
    const args = ctx.message.text.split(' '); 
    if (args.length < 2) {
        return ctx.reply("S·ª≠ d·ª•ng: /adduser <user_id>");
    }

    const userIdToAdd = parseInt(args[1], 10);
    if (isNaN(userIdToAdd)) {
        return ctx.reply("ID kh√¥ng h·ª£p l·ªá. S·ª≠ d·ª•ng: /adduser <user_id>");
    }

    if (authorizedUsers.has(userIdToAdd)) {
        return ctx.reply(`User ${userIdToAdd} ƒë√£ c√≥ quy·ªÅn.`);
    }

    authorizedUsers.add(userIdToAdd);
    saveAuthorizedUsers(); // <-- Ch·∫°y ƒë·ªìng b·ªô
    await ctx.reply(`‚úÖ ƒê√£ th√™m User ${userIdToAdd} v√†o danh s√°ch ƒë∆∞·ª£c ph√©p.`);
});

// L·ªánh /deluser
bot.command('deluser', async (ctx) => {
    if (ctx.from.id !== superAdminIdNum) {
        return ctx.reply("‚õî L·ªánh n√†y ch·ªâ d√†nh cho Super Admin.");
    }

    const args = ctx.message.text.split(' ');
    if (args.length < 2) {
        return ctx.reply("S·ª≠ d·ª•ng: /deluser <user_id>");
    }

    const userIdToDel = parseInt(args[1], 10);
    if (isNaN(userIdToDel)) {
        return ctx.reply("ID kh√¥ng h·ª£p l·ªá. S·ª≠ d·ª•ng: /deluser <user_id>");
    }

    if (authorizedUsers.has(userIdToDel)) {
        authorizedUsers.delete(userIdToDel);
        saveAuthorizedUsers(); // <-- Ch·∫°y ƒë·ªìng b·ªô
        await ctx.reply(`‚úÖ ƒê√£ x√≥a User ${userIdToDel} kh·ªèi danh s√°ch.`);
    } else {
        await ctx.reply(`User ${userIdToDel} kh√¥ng t√¨m th·∫•y trong danh s√°ch.`);
    }
});

// L·ªánh /listusers
bot.command('listusers', (ctx) => {
    if (ctx.from.id !== superAdminIdNum) {
        return ctx.reply("‚õî L·ªánh n√†y ch·ªâ d√†nh cho Super Admin.");
    }

    let message = `üëë *Super Admin:* \`${superAdminIdNum}\`\n\n`;
    if (authorizedUsers.size === 0) {
        message += "Danh s√°ch user ƒë∆∞·ª£c c·∫•p quy·ªÅn kh√°c ƒëang tr·ªëng.";
    } else {
        message += "Danh s√°ch User ƒë∆∞·ª£c c·∫•p quy·ªÅn kh√°c:\n";
        for (const userId of authorizedUsers) {
            message += `- \`${userId}\`\n`;
        }
    }
    ctx.replyWithMarkdown(message);
});

// --- 5. H√ÄM KH·ªûI ƒê·ªòNG CH√çNH ---

function startBot() {
    // T·∫£i danh s√°ch user (ch·∫°y ƒë·ªìng b·ªô)
    loadAuthorizedUsers(); 
    
    console.log("Bot ƒëang ch·∫°y...");
    
    // Kh·ªüi ƒë·ªông bot (c√∫ ph√°p v3)
    bot.launch();

    // B·∫Øt t√≠n hi·ªáu t·∫Øt bot an to√†n (Ctrl+C)
    process.once('SIGINT', () => bot.stop());
    process.once('SIGTERM', () => bot.stop());
}

startBot();